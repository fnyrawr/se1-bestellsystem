
/**
 * dependency on ArticleRepository.
 */
private final ArticleRepository articleRepository;


/**
 * internal data structure to manage inventory (unitsInStore) for Article-id's. 
 */
private final HashMap<String,Integer> inventory = new HashMap<String,Integer>();


/**
 * Create new article in InventoryManager (add to internal ArticleRepository).
 * 
 * @param article article to create.
 * @throws IllegalArgumentException if article is null, has no valid id or already exists.
 */
@Override
public Article save( Article article ) {
	if( article == null )
		throw new IllegalArgumentException( "illegal article: null" );
	//
	String id = article.getId();
	if( id == null )
		throw new IllegalArgumentException( "illegal article.id: null" );
	//
	articleRepository.save( article );	// save, make sure to avoid duplicates
	//
	if( ! inventory.containsKey( id ) ) {
		this.inventory.put( id, Integer.valueOf( 0 ) );
	}
	return article;
}


/**
 * Print inventory as table.
 * 
 * @return printed inventory (as table).
 */
@Override
public StringBuffer printInventory() {
	return printInventory(
		StreamSupport.stream( articleRepository.findAll().spliterator(), false )
	);
}

private StringBuffer printInventory( Stream<Article> articleStream ) {
	//
	Formatter formatter = new FormatterImpl();
	TableFormatter tfmt = new TableFormatterImpl( formatter, new Object[][] {
		// five column table with column specs: width and alignment ('[' left, ']' right)
		{ 12, '[' }, { 32, '[' }, { 12, ']' }, { 10, ']' }, { 14, ']' }
	})
		.liner( "+-+-+-+-+-+" )		// print table header
		.hdr( "||", "Inv.-Id", "Article / Unit", "Unit", "Units", "Value" )
		.hdr( "||", "", "", "Price", "in-Stock", "(in â‚¬)" )
		.liner( "+-+-+-+-+-+" )
		;
	//
	long totalValue = articleStream
		.map( a -> {
			long unitsInStock = this.inventory.get( a.getId() ).intValue();
			long value = a.getUnitPrice() * unitsInStock;
			tfmt.hdr( "||",
				a.getId(),
				a.getDescription(),
				formatter.fmtPrice( a.getUnitPrice(), a.getCurrency()).toString(),
				Long.toString( unitsInStock ),
				formatter.fmtPrice( value, a.getCurrency() ).toString()
			);
			return value;
		})
		.reduce( 0L, (a, b) -> a + b );
	//
	String inventoryValue = formatter.fmtPrice( totalValue, Currency.EUR ).toString();
	tfmt
		.liner( "+-+-+-+-+-+" )
		.hdr( "", "", "Invent", "ory Value:", inventoryValue )
		;
	//
	return tfmt.getFormatter().getBuffer();
}
